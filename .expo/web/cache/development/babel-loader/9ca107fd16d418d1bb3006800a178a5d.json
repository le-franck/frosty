{"ast":null,"code":"'use strict';\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/franckcaget/Hedia/frosty/node_modules/react-native-swipeable-list/Swipeable/SwipeableFlatList.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport SwipeableRow from \"./SwipeableRow\";\n\nvar SwipeableFlatList = function (_React$Component) {\n  _inherits(SwipeableFlatList, _React$Component);\n\n  var _super = _createSuper(SwipeableFlatList);\n\n  function SwipeableFlatList(props, context) {\n    var _this;\n\n    _classCallCheck(this, SwipeableFlatList);\n\n    _this = _super.call(this, props, context);\n    _this._flatListRef = null;\n    _this._shouldBounceFirstRowOnMount = false;\n\n    _this._onScroll = function (e) {\n      if (_this.state.openRowKey) {\n        _this.setState({\n          openRowKey: null\n        });\n      }\n\n      _this.props.onScroll && _this.props.onScroll(e);\n    };\n\n    _this._renderItem = function (info) {\n      var slideoutView = _this.props.renderQuickActions(info);\n\n      var key = _this.props.keyExtractor(info.item, info.index);\n\n      if (!slideoutView) {\n        return _this.props.renderItem(info);\n      }\n\n      var shouldBounceOnMount = false;\n\n      if (_this._shouldBounceFirstRowOnMount) {\n        _this._shouldBounceFirstRowOnMount = false;\n        shouldBounceOnMount = true;\n      }\n\n      return React.createElement(SwipeableRow, {\n        slideoutView: slideoutView,\n        isOpen: key === _this.state.openRowKey,\n        maxSwipeDistance: _this._getMaxSwipeDistance(info),\n        onOpen: function onOpen() {\n          return _this._onOpen(key);\n        },\n        onClose: function onClose() {\n          return _this._onClose(key);\n        },\n        shouldBounceOnMount: shouldBounceOnMount,\n        onSwipeEnd: _this._setListViewScrollable,\n        onSwipeStart: _this._setListViewNotScrollable,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }\n      }, _this.props.renderItem(info));\n    };\n\n    _this._setListViewScrollable = function () {\n      _this._setListViewScrollableTo(true);\n    };\n\n    _this._setListViewNotScrollable = function () {\n      _this._setListViewScrollableTo(false);\n    };\n\n    _this.state = {\n      openRowKey: null\n    };\n    _this._shouldBounceFirstRowOnMount = _this.props.bounceFirstRowOnMount;\n    return _this;\n  }\n\n  _createClass(SwipeableFlatList, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(FlatList, _extends({}, this.props, {\n        ref: function ref(_ref) {\n          _this2._flatListRef = _ref;\n        },\n        onScroll: this._onScroll,\n        renderItem: this._renderItem,\n        extraData: this.state,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }\n      }));\n    }\n  }, {\n    key: \"_getMaxSwipeDistance\",\n    value: function _getMaxSwipeDistance(info) {\n      if (typeof this.props.maxSwipeDistance === 'function') {\n        return this.props.maxSwipeDistance(info);\n      }\n\n      return this.props.maxSwipeDistance;\n    }\n  }, {\n    key: \"_setListViewScrollableTo\",\n    value: function _setListViewScrollableTo(value) {\n      if (this._flatListRef) {\n        this._flatListRef.setNativeProps({\n          scrollEnabled: value\n        });\n      }\n    }\n  }, {\n    key: \"_onOpen\",\n    value: function _onOpen(key) {\n      this.setState({\n        openRowKey: key\n      });\n    }\n  }, {\n    key: \"_onClose\",\n    value: function _onClose(key) {\n      this.setState({\n        openRowKey: null\n      });\n    }\n  }]);\n\n  return SwipeableFlatList;\n}(React.Component);\n\nSwipeableFlatList.defaultProps = _objectSpread(_objectSpread({}, FlatList.defaultProps), {}, {\n  bounceFirstRowOnMount: true,\n  renderQuickActions: function renderQuickActions() {\n    return null;\n  }\n});\nexport default SwipeableFlatList;","map":{"version":3,"sources":["/Users/franckcaget/Hedia/frosty/node_modules/react-native-swipeable-list/Swipeable/SwipeableFlatList.js"],"names":["React","SwipeableRow","SwipeableFlatList","props","context","_flatListRef","_shouldBounceFirstRowOnMount","_onScroll","e","state","openRowKey","setState","onScroll","_renderItem","info","slideoutView","renderQuickActions","key","keyExtractor","item","index","renderItem","shouldBounceOnMount","_getMaxSwipeDistance","_onOpen","_onClose","_setListViewScrollable","_setListViewNotScrollable","_setListViewScrollableTo","bounceFirstRowOnMount","ref","maxSwipeDistance","value","setNativeProps","scrollEnabled","Component","defaultProps","FlatList"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nimport React from 'react';\nimport { FlatList } from 'react-native';\nimport SwipeableRow from './SwipeableRow';\n\n// import type { Props as FlatListProps } from 'react-native';\n// import type { renderItemType } from 'VirtualizedList';\n\n// TODO: Make this $ReadOnly and Exact. Will require doing the same to the props in\n//       Libraries/Lists/*\n// type SwipableListProps = {\n//     /**\n//      * To alert the user that swiping is possible, the first row can bounce\n//      * on component mount.\n//      */\n//     bounceFirstRowOnMount: boolean,\n\n//     /**\n//      * Maximum distance to open to after a swipe\n//      */\n//     maxSwipeDistance: number | (Object => number),\n\n//     /**\n//      * Callback method to render the view that will be unveiled on swipe\n//      */\n//     renderQuickActions: renderItemType,\n// };\n\n// type Props<ItemT> = SwipableListProps & FlatListProps<ItemT>;\n\n// type State = {|\n//     openRowKey: ?string,\n// |};\n\n/**\n * A container component that renders multiple SwipeableRow's in a FlatList\n * implementation. This is designed to be a drop-in replacement for the\n * standard React Native `FlatList`, so use it as if it were a FlatList, but\n * with extra props, i.e.\n *\n * <SwipeableListView renderRow={..} renderQuickActions={..} {..FlatList props} />\n *\n * SwipeableRow can be used independently of this component, but the main\n * benefit of using this component is\n *\n * - It ensures that at most 1 row is swiped open (auto closes others)\n * - It can bounce the 1st row of the list so users know it's swipeable\n * - Increase performance on iOS by locking list swiping when row swiping is occurring\n * - More to come\n */\n\nclass SwipeableFlatList extends React.Component {\n    _flatListRef = null;\n    _shouldBounceFirstRowOnMount = false;\n\n    static defaultProps = {\n        ...FlatList.defaultProps,\n        bounceFirstRowOnMount: true,\n        renderQuickActions: () => null,\n    };\n\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            openRowKey: null,\n        };\n\n        this._shouldBounceFirstRowOnMount = this.props.bounceFirstRowOnMount;\n    }\n\n    render() {\n        return (\n            <FlatList\n                {...this.props}\n                ref={ref => {\n                    this._flatListRef = ref;\n                }}\n                onScroll={this._onScroll}\n                renderItem={this._renderItem}\n                extraData={this.state}\n            />\n        );\n    }\n\n    _onScroll = e => {\n        // Close any opens rows on ListView scroll\n        if (this.state.openRowKey) {\n            this.setState({\n                openRowKey: null,\n            });\n        }\n\n        this.props.onScroll && this.props.onScroll(e);\n    };\n\n    _renderItem = info => {\n        const slideoutView = this.props.renderQuickActions(info);\n        const key = this.props.keyExtractor(info.item, info.index);\n\n        // If renderQuickActions is unspecified or returns falsey, don't allow swipe\n        if (!slideoutView) {\n            return this.props.renderItem(info);\n        }\n\n        let shouldBounceOnMount = false;\n        if (this._shouldBounceFirstRowOnMount) {\n            this._shouldBounceFirstRowOnMount = false;\n            shouldBounceOnMount = true;\n        }\n\n        return (\n            <SwipeableRow\n                slideoutView={slideoutView}\n                isOpen={key === this.state.openRowKey}\n                maxSwipeDistance={this._getMaxSwipeDistance(info)}\n                onOpen={() => this._onOpen(key)}\n                onClose={() => this._onClose(key)}\n                shouldBounceOnMount={shouldBounceOnMount}\n                onSwipeEnd={this._setListViewScrollable}\n                onSwipeStart={this._setListViewNotScrollable}\n            >\n                {this.props.renderItem(info)}\n            </SwipeableRow>\n        );\n    };\n\n    // This enables rows having variable width slideoutView.\n    _getMaxSwipeDistance(info) {\n        if (typeof this.props.maxSwipeDistance === 'function') {\n            return this.props.maxSwipeDistance(info);\n        }\n\n        return this.props.maxSwipeDistance;\n    }\n\n    _setListViewScrollableTo(value) {\n        if (this._flatListRef) {\n            this._flatListRef.setNativeProps({\n                scrollEnabled: value,\n            });\n        }\n    }\n\n    _setListViewScrollable = () => {\n        this._setListViewScrollableTo(true);\n    };\n\n    _setListViewNotScrollable = () => {\n        this._setListViewScrollableTo(false);\n    };\n\n    _onOpen(key) {\n        this.setState({\n            openRowKey: key,\n        });\n    }\n\n    _onClose(key) {\n        this.setState({\n            openRowKey: null,\n        });\n    }\n}\n\nexport default SwipeableFlatList;\n"]},"metadata":{},"sourceType":"module"}