{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/franckcaget/Desktop/frosty/views/Repository.tsx\";\n\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { COLORS_THEME } from \"../utils/constants\";\n\nvar RepositoryView = function RepositoryView(_ref) {\n  var owner = _ref.owner,\n      repo = _ref.repo;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      _loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      _repository = _useState4[0],\n      setRepository = _useState4[1];\n\n  useEffect(function () {\n    getRepos();\n  }, []);\n\n  var getRepos = function getRepos() {\n    setLoading(true);\n    fetch('https://api.github.com/repos/' + owner + '/' + repo, {\n      'headers': {\n        'Authorization': \"token 66ef3f80be2e4f109bfbb55831bb0e88006281b1\",\n        'Accept': 'application/vnd.github.v3+json'\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (responseJson) {\n      var id = responseJson.id,\n          description = responseJson.description,\n          forks_count = responseJson.forks_count,\n          homepage = responseJson.homepage,\n          language = responseJson.language,\n          name = responseJson.name,\n          open_issues_count = responseJson.open_issues_count,\n          owner = responseJson.owner,\n          stargazers_count = responseJson.stargazers_count,\n          subscribers_count = responseJson.subscribers_count,\n          watchers_count = responseJson.watchers_count;\n      var user = {\n        id: owner.id,\n        avatar_url: owner.avatar_url,\n        login: owner.login\n      };\n      var res = {\n        id: id,\n        description: description,\n        forks_count: forks_count,\n        homepage: homepage,\n        language: language,\n        name: name,\n        open_issues_count: open_issues_count,\n        owner: user,\n        stargazers_count: stargazers_count,\n        subscribers_count: subscribers_count,\n        watchers_count: watchers_count\n      };\n      setRepository(res);\n    }).catch(function (error) {\n      return console.log(error);\n    });\n    setLoading(false);\n  };\n\n  var RepositoryWrapper = function RepositoryWrapper() {\n    return React.createElement(View, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    }, React.createElement(Image, {\n      style: styles.userPicture,\n      source: {\n        uri: _repository == null ? void 0 : _repository.owner.avatar_url\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }\n    }));\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, _loading ? React.createElement(ActivityIndicator, {\n    style: {\n      flexGrow: 1\n    },\n    size: \"large\",\n    color: COLORS_THEME.info,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 25\n    }\n  }) : React.createElement(RepositoryWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: COLORS_THEME.bg_secondary,\n    padding: 16\n  },\n  userPicture: {\n    height: 80,\n    width: 80,\n    borderRadius: 40\n  }\n});\nexport default RepositoryView;","map":{"version":3,"sources":["/Users/franckcaget/Desktop/frosty/views/Repository.tsx"],"names":["React","useState","useEffect","COLORS_THEME","RepositoryView","owner","repo","_loading","setLoading","_repository","setRepository","getRepos","fetch","then","response","json","responseJson","id","description","forks_count","homepage","language","name","open_issues_count","stargazers_count","subscribers_count","watchers_count","user","avatar_url","login","res","catch","error","console","log","RepositoryWrapper","styles","userPicture","uri","container","flexGrow","info","StyleSheet","create","flex","backgroundColor","bg_secondary","padding","height","width","borderRadius"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { View, StyleSheet, Text, ActivityIndicator, TouchableOpacity, Image } from 'react-native';\nimport { RepositoryModel } from '../model/repository';\nimport { COLORS_THEME } from '../utils/constants';\nimport { UserLightModel } from '../model/user_light';\n\nconst RepositoryView = ({ owner, repo }: { owner: string, repo: string }) => {\n    const [_loading, setLoading] = useState<boolean>(false);\n    const [_repository, setRepository] = useState<RepositoryModel>()\n\n    useEffect(() => { getRepos() }, [])\n\n    const getRepos = () => {\n        setLoading(true);\n\n        fetch('https://api.github.com/repos/' + owner + '/' + repo, {\n            'headers': {\n                'Authorization': \"token 66ef3f80be2e4f109bfbb55831bb0e88006281b1\",\n                'Accept': 'application/vnd.github.v3+json'\n            }\n        })\n            .then(response => response.json())\n            .then((responseJson: RepositoryModel) => {\n                const {\n                    id,\n                    description,\n                    forks_count,\n                    homepage,\n                    language,\n                    name,\n                    open_issues_count,\n                    owner,\n                    stargazers_count,\n                    subscribers_count,\n                    watchers_count,\n                } = responseJson;\n\n                const user: UserLightModel = {\n                    id: owner.id,\n                    avatar_url: owner.avatar_url,\n                    login: owner.login\n                }\n\n                const res: RepositoryModel = {\n                    id,\n                    description,\n                    forks_count,\n                    homepage,\n                    language,\n                    name,\n                    open_issues_count,\n                    owner: user,\n                    stargazers_count,\n                    subscribers_count,\n                    watchers_count,\n                }\n                setRepository(res);\n            })\n\n            .catch(error => console.log(error));\n        setLoading(false);\n    }\n\n    const RepositoryWrapper = () => {\n        return (\n            <View >\n                <Image\n                    style={styles.userPicture}\n                    source={{\n                        uri: _repository?.owner.avatar_url,\n                    }}\n                />\n            </View>)\n    }\n\n\n    return (\n        <View style={styles.container}>\n            {_loading ? <ActivityIndicator style={{ flexGrow: 1 }} size=\"large\" color={COLORS_THEME.info} /> :\n                <RepositoryWrapper />}\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: COLORS_THEME.bg_secondary,\n        padding: 16,\n    },\n    userPicture: {\n        height: 80,\n        width: 80,\n        borderRadius: 40,\n    }\n});\n\n\nexport default RepositoryView;"]},"metadata":{},"sourceType":"module"}