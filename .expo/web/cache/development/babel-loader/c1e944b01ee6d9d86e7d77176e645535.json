{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nexport var getRepos = function getRepos(repositories, setRepositories) {\n  var lastMonth = new Date(new Date().setMonth(new Date().getMonth() - 1)).toISOString().split('T')[0];\n  var numberPerPage = 24;\n  var page = Math.ceil(repositories.length / numberPerPage) + 1;\n  var lastMonthUrl = 'https://api.github.com/search/repositories?q=created:>' + lastMonth + '&sort=stars&order=desc&per_page=' + numberPerPage + '&page=' + page;\n  fetch(lastMonthUrl, {\n    'headers': {\n      'Authorization': \"token 66ef3f80be2e4f109bfbb55831bb0e88006281b1\",\n      'Accept': 'application/vnd.github.v3+json'\n    }\n  }).then(function (response) {\n    return response.json();\n  }).then(function (responseJson) {\n    if (responseJson.items) {\n      var res = responseJson.items.map(function (_ref) {\n        var id = _ref.id,\n            name = _ref.name,\n            description = _ref.description,\n            stargazers_count = _ref.stargazers_count,\n            owner = _ref.owner;\n        return {\n          id: id,\n          name: name,\n          description: description,\n          stargazers_count: stargazers_count,\n          owner: {\n            login: owner.login\n          }\n        };\n      });\n      setRepositories([].concat(_toConsumableArray(repositories), _toConsumableArray(res)));\n    }\n  }).catch(function (error) {\n    return console.log(error);\n  });\n};\nexport var getRepo = function getRepo(setRepository, owner, repo) {\n  fetch('https://api.github.com/repos/' + owner + '/' + repo, {\n    'headers': {\n      'Authorization': \"token 66ef3f80be2e4f109bfbb55831bb0e88006281b1\",\n      'Accept': 'application/vnd.github.v3+json'\n    }\n  }).then(function (response) {\n    return response.json();\n  }).then(function (responseJson) {\n    var id = responseJson.id,\n        description = responseJson.description,\n        forks_count = responseJson.forks_count,\n        homepage = responseJson.homepage,\n        language = responseJson.language,\n        name = responseJson.name,\n        open_issues_count = responseJson.open_issues_count,\n        owner = responseJson.owner,\n        stargazers_count = responseJson.stargazers_count,\n        subscribers_count = responseJson.subscribers_count,\n        watchers_count = responseJson.watchers_count;\n    var user = {\n      id: owner.id,\n      avatar_url: owner.avatar_url,\n      login: owner.login\n    };\n    var res = {\n      id: id,\n      description: description,\n      forks_count: forks_count,\n      homepage: homepage,\n      language: language,\n      name: name,\n      open_issues_count: open_issues_count,\n      owner: user,\n      stargazers_count: stargazers_count,\n      subscribers_count: subscribers_count,\n      watchers_count: watchers_count\n    };\n    setRepository(res);\n  }).catch(function (error) {\n    return console.log(error);\n  });\n};","map":{"version":3,"sources":["/Users/franckcaget/Desktop/frosty/logic/dataFetch.ts"],"names":["getRepos","repositories","setRepositories","lastMonth","Date","setMonth","getMonth","toISOString","split","numberPerPage","page","Math","ceil","length","lastMonthUrl","fetch","then","response","json","responseJson","items","res","map","id","name","description","stargazers_count","owner","login","catch","error","console","log","getRepo","setRepository","repo","forks_count","homepage","language","open_issues_count","subscribers_count","watchers_count","user","avatar_url"],"mappings":"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","sourcesContent":["import { RepositoryLightModel } from \"../model/repository_light\";\nimport { RepositoryModel } from \"../model/repository\";\nimport { UserLightModel } from \"../model/user_light\";\n\ninterface Response {\n    incomplete_results: boolean;\n    items: RepositoryLightModel[];\n    total_count: number;\n}\n\nexport const getRepos = (repositories: RepositoryLightModel[], setRepositories: Function) => {\n    const lastMonth = new Date(new Date().setMonth(new Date().getMonth() - 1))\n        .toISOString()\n        .split('T')[0];\n\n    const numberPerPage = 24;\n\n    const page = Math.ceil(repositories.length / numberPerPage) + 1;\n\n    const lastMonthUrl = 'https://api.github.com/search/repositories?q=created:>' + lastMonth + '&sort=stars&order=desc&per_page=' + numberPerPage + '&page=' + page;\n\n\n    fetch(lastMonthUrl, {\n        'headers': {\n            'Authorization': \"token 66ef3f80be2e4f109bfbb55831bb0e88006281b1\",\n            'Accept': 'application/vnd.github.v3+json'\n        }\n    })\n        .then(response => response.json())\n        .then((responseJson: Response) => {\n\n            if (responseJson.items) {\n                const res: RepositoryLightModel[] = responseJson.items.map(({\n                    id,\n                    name,\n                    description,\n                    stargazers_count,\n                    owner\n                }) => {\n\n                    return ({\n                        id,\n                        name,\n                        description,\n                        stargazers_count,\n                        owner: {\n                            login: owner.login,\n                        }\n                    })\n                });\n                setRepositories([...repositories, ...res]);\n            }\n        })\n        .catch(error => console.log(error));\n}\n\nexport const getRepo = (setRepository: Function, owner: string, repo: string) => {\n    fetch('https://api.github.com/repos/' + owner + '/' + repo, {\n        'headers': {\n            'Authorization': \"token 66ef3f80be2e4f109bfbb55831bb0e88006281b1\",\n            'Accept': 'application/vnd.github.v3+json'\n        }\n    })\n        .then(response => response.json())\n        .then((responseJson: RepositoryModel) => {\n            const {\n                id,\n                description,\n                forks_count,\n                homepage,\n                language,\n                name,\n                open_issues_count,\n                owner,\n                stargazers_count,\n                subscribers_count,\n                watchers_count,\n            } = responseJson;\n\n            const user: UserLightModel = {\n                id: owner.id,\n                avatar_url: owner.avatar_url,\n                login: owner.login\n            }\n\n            const res: RepositoryModel = {\n                id,\n                description,\n                forks_count,\n                homepage,\n                language,\n                name,\n                open_issues_count,\n                owner: user,\n                stargazers_count,\n                subscribers_count,\n                watchers_count,\n            }\n            setRepository(res);\n        })\n\n        .catch(error => console.log(error));\n}"]},"metadata":{},"sourceType":"module"}