{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/franckcaget/Desktop/frosty/views/Repository.tsx\";\n\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport RepositoryLines from \"./RepositoryLines\";\nvar STORAGE_KEY = '@starred_repositories';\n\nvar RepositoryView = function RepositoryView() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      _loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      _repositories = _useState4[0],\n      setRepositories = _useState4[1];\n\n  useEffect(function () {\n    getRepos();\n  }, []);\n\n  var getRepos = function getRepos() {\n    setLoading(true);\n    var lastMonth = new Date(new Date().setMonth(new Date().getMonth() - 1)).toISOString().split('T')[0];\n    var page = Math.ceil(_repositories.length / 24) + 1;\n    fetch('https://api.github.com/search/repositories?q=created:>' + lastMonth + '&sort=stars&order=desc&per_page=24&page=' + page, {\n      'headers': {\n        'Authorization': \"token 66ef3f80be2e4f109bfbb55831bb0e88006281b1\"\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (responseJson) {\n      if (responseJson.items) {\n        console.log(responseJson.items);\n        var res = responseJson.items.map(function (_ref) {\n          var id = _ref.id,\n              name = _ref.name,\n              description = _ref.description,\n              html_url = _ref.html_url,\n              language = _ref.language,\n              stargazers_count = _ref.stargazers_count,\n              open_issues = _ref.open_issues,\n              owner = _ref.owner;\n          return {\n            id: id,\n            name: name,\n            description: description,\n            html_url: html_url,\n            language: language,\n            stargazers_count: stargazers_count,\n            open_issues: open_issues,\n            owner: {\n              avatar_url: owner.avatar_url,\n              login: owner.login,\n              html_url: owner.html_url\n            }\n          };\n        });\n        setRepositories([].concat(_toConsumableArray(_repositories), _toConsumableArray(res)));\n      }\n    }).catch(function (error) {\n      return console.log(error);\n    });\n    setTimeout(function () {\n      setLoading(false);\n    }, 1000);\n  };\n\n  var endOfList = function endOfList(info) {\n    if (!_loading) {\n      getRepos();\n    }\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, React.createElement(Image, {\n    source: require(\"../img/GitHub_Logo_White.png\"),\n    style: {\n      width: \"auto\",\n      height: 40\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }), _repositories && React.createElement(RepositoryLines, {\n    repositories: _repositories,\n    fetchMore: function fetchMore(info) {\n      return endOfList(info);\n    },\n    isLoading: _loading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 31\n    }\n  }), React.createElement(StatusBar, {\n    style: \"auto\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\nexport default RepositoryView;","map":{"version":3,"sources":["/Users/franckcaget/Desktop/frosty/views/Repository.tsx"],"names":["StatusBar","React","useState","useEffect","RepositoryLines","STORAGE_KEY","RepositoryView","_loading","setLoading","_repositories","setRepositories","getRepos","lastMonth","Date","setMonth","getMonth","toISOString","split","page","Math","ceil","length","fetch","then","response","json","responseJson","items","console","log","res","map","id","name","description","html_url","language","stargazers_count","open_issues","owner","avatar_url","login","catch","error","setTimeout","endOfList","info","styles","container","require","width","height","StyleSheet","create","flex","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, { useState, useEffect } from 'react';\nimport { StyleSheet, Image, View, Button, Vibration } from 'react-native';\nimport { RepositoryModel } from '../model/repository';\nimport RepositoryLines from './RepositoryLines';\nimport AsyncStorage from '@react-native-community/async-storage';\n\ninterface Response {\n    incomplete_results: boolean;\n    items: RepositoryModel[];\n    total_count: number;\n}\n\nconst STORAGE_KEY = '@starred_repositories';\n\nconst RepositoryView = () => {\n\n    const [_loading, setLoading] = useState<boolean>(false);\n    const [_repositories, setRepositories] = useState<RepositoryModel[]>([]);\n\n\n    useEffect(() => {\n        getRepos();\n    }, [])\n\n    const getRepos = () => {\n        setLoading(true);\n\n\n        const lastMonth = new Date(new Date().setMonth(new Date().getMonth() - 1))\n            .toISOString()\n            .split('T')[0];\n        const page = Math.ceil(_repositories.length / 24) + 1;\n\n        fetch('https://api.github.com/search/repositories?q=created:>' + lastMonth + '&sort=stars&order=desc&per_page=24&page=' + page, {\n            'headers': {\n                'Authorization': \"token 66ef3f80be2e4f109bfbb55831bb0e88006281b1\"\n            }\n        })\n            .then(response => response.json())\n            .then((responseJson: Response) => {\n\n                if (responseJson.items) {\n                    console.log(responseJson.items);\n                    const res: RepositoryModel[] = responseJson.items.map(({\n                        id,\n                        name,\n                        description,\n                        html_url,\n                        language,\n                        stargazers_count,\n                        open_issues,\n                        owner\n                    }) => {\n\n                        return ({\n                            id,\n                            name,\n                            description,\n                            html_url,\n                            language,\n                            stargazers_count,\n                            open_issues,\n                            owner: {\n                                avatar_url: owner.avatar_url,\n                                login: owner.login,\n                                html_url: owner.html_url\n                            }\n                        })\n                    });\n                    setRepositories([..._repositories, ...res]);\n                }\n            })\n            .catch(error => console.log(error));\n\n        setTimeout(() => {\n            setLoading(false);\n        }, 1000);\n\n    }\n\n\n    const endOfList = (info: any) => {\n\n        if (!_loading) {\n            getRepos();\n        }\n    }\n\n\n    return (\n        <View style={styles.container}>\n            <Image source={require('../img/GitHub_Logo_White.png')} style={{ width: \"auto\", height: 40 }} />\n            {_repositories && <RepositoryLines repositories={_repositories} fetchMore={(info: any) => endOfList(info)} isLoading={_loading}></RepositoryLines>}\n            <StatusBar style=\"auto\" />\n        </View>\n    );\n}\n\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n});\n\nexport default RepositoryView;"]},"metadata":{},"sourceType":"module"}