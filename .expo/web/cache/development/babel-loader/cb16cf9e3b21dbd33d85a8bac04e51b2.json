{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/franckcaget/Desktop/frosty/navigation/Tabbar.tsx\";\n\nimport * as React from 'react';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport Home from \"../views/Home\";\nimport RepositoryView from \"../views/Repository\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nvar Tab = createBottomTabNavigator();\n\nvar Tabbar = function Tabbar() {\n  var MyTabBar = function MyTabBar(_ref) {\n    var state = _ref.state,\n        descriptors = _ref.descriptors,\n        navigation = _ref.navigation;\n    return React.createElement(View, {\n      style: {\n        flexDirection: 'row'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }\n    }, state.routes.map(function (route, index) {\n      var options = descriptors[route.key].options;\n      var label = route.name;\n      var isFocused = state.index === index;\n\n      var onPress = function onPress() {\n        var event = navigation.emit({\n          type: 'tabPress',\n          target: route.key\n        });\n\n        if (!isFocused && !event.defaultPrevented) {\n          navigation.navigate(route.name);\n        }\n      };\n\n      var onLongPress = function onLongPress() {\n        navigation.emit({\n          type: 'tabLongPress',\n          target: route.key\n        });\n      };\n\n      return React.createElement(TouchableOpacity, {\n        accessibilityRole: \"button\",\n        accessibilityState: isFocused ? {\n          selected: true\n        } : {},\n        accessibilityLabel: options.tabBarAccessibilityLabel,\n        testID: options.tabBarTestID,\n        onPress: onPress,\n        onLongPress: onLongPress,\n        style: {\n          flex: 1\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 25\n        }\n      }, React.createElement(Text, {\n        style: {\n          color: isFocused ? '#673ab7' : '#222'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 29\n        }\n      }, label));\n    }));\n  };\n\n  return React.createElement(Tab.Navigator, {\n    tabBar: function tabBar(props) {\n      return React.createElement(MyTabBar, {\n        state: props.state,\n        descriptors: props.descriptors,\n        navigation: props.navigation,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 41\n        }\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, React.createElement(Tab.Screen, {\n    name: \"Home\",\n    component: Home,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }), React.createElement(Tab.Screen, {\n    name: \"Repos\",\n    component: RepositoryView,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }), React.createElement(Tab.Screen, {\n    name: \"Home3\",\n    component: Home,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default Tabbar;","map":{"version":3,"sources":["/Users/franckcaget/Desktop/frosty/navigation/Tabbar.tsx"],"names":["React","createBottomTabNavigator","Home","RepositoryView","Tab","Tabbar","MyTabBar","state","descriptors","navigation","flexDirection","routes","map","route","index","options","key","label","name","isFocused","onPress","event","emit","type","target","defaultPrevented","navigate","onLongPress","selected","tabBarAccessibilityLabel","tabBarTestID","flex","color","props"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport Home from \"../views/Home\";\nimport RepositoryView from '../views/Repository';\nimport { View, TouchableOpacity, Text } from 'react-native';\n\nconst Tab = createBottomTabNavigator();\n\n\n\nconst Tabbar = () => {\n\n    const MyTabBar = ({ state, descriptors, navigation }: { state: any, descriptors: any, navigation: any }) => {\n        return (\n            <View style={{ flexDirection: 'row' }}>\n                {state.routes.map((route, index) => {\n                    const { options } = descriptors[route.key];\n                    const label = route.name;\n\n                    const isFocused = state.index === index;\n\n                    const onPress = () => {\n                        const event = navigation.emit({\n                            type: 'tabPress',\n                            target: route.key,\n                        });\n\n                        if (!isFocused && !event.defaultPrevented) {\n                            navigation.navigate(route.name);\n                        }\n                    };\n\n                    const onLongPress = () => {\n                        navigation.emit({\n                            type: 'tabLongPress',\n                            target: route.key,\n                        });\n                    };\n\n                    return (\n                        <TouchableOpacity\n                            accessibilityRole=\"button\"\n                            accessibilityState={isFocused ? { selected: true } : {}}\n                            accessibilityLabel={options.tabBarAccessibilityLabel}\n                            testID={options.tabBarTestID}\n                            onPress={onPress}\n                            onLongPress={onLongPress}\n                            style={{ flex: 1 }}\n                        >\n                            <Text style={{ color: isFocused ? '#673ab7' : '#222' }}>\n                                {label}\n                            </Text>\n                        </TouchableOpacity>\n                    );\n                })}\n            </View>\n        );\n    }\n\n    return (\n        <Tab.Navigator tabBar={props => <MyTabBar state={props.state} descriptors={props.descriptors} navigation={props.navigation} />} >\n            <Tab.Screen name=\"Home\" component={Home} />\n            <Tab.Screen name=\"Repos\" component={RepositoryView} />\n            <Tab.Screen name=\"Home3\" component={Home} />\n        </Tab.Navigator>\n    );\n}\n\nexport default Tabbar;"]},"metadata":{},"sourceType":"module"}