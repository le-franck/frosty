{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/franckcaget/Hedia/frosty/views/Repository.tsx\";\n\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport RepositoryLine from \"./RepositoryLine\";\n\nvar RepositoryView = function RepositoryView() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      _repositories = _useState4[0],\n      setRepositories = _useState4[1];\n\n  var _useState5 = useState(1),\n      _useState6 = _slicedToArray(_useState5, 2),\n      _page = _useState6[0],\n      setPage = _useState6[1];\n\n  useEffect(function () {\n    getRepos(null);\n  });\n\n  var getRepos = function getRepos(info) {\n    console.log(info);\n    setLoading(false);\n    if (info) setPage(_page + 1);\n    var lastMonth = new Date(new Date().setMonth(new Date().getMonth() - 1)).toISOString().split('T')[0];\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, _repositories && React.createElement(RepositoryLine, {\n    repositories: _repositories,\n    fetchMore: function fetchMore(i) {\n      return i;\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 31\n    }\n  }), React.createElement(StatusBar, {\n    style: \"auto\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    color: '#9a9ec9',\n    backgroundColor: '#4b56a4',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\nexport default RepositoryView;","map":{"version":3,"sources":["/Users/franckcaget/Hedia/frosty/views/Repository.tsx"],"names":["StatusBar","React","useState","useEffect","RepositoryLine","RepositoryView","loading","setLoading","_repositories","setRepositories","_page","setPage","getRepos","info","console","log","lastMonth","Date","setMonth","getMonth","toISOString","split","styles","container","i","StyleSheet","create","flex","color","backgroundColor","alignItems","justifyContent"],"mappings":";;;;;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAGA,OAAOC,cAAP;;AASA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAAA,kBAEKH,QAAQ,CAAC,KAAD,CAFb;AAAA;AAAA,MAElBI,OAFkB;AAAA,MAETC,UAFS;;AAAA,mBAGgBL,QAAQ,CAAoB,EAApB,CAHxB;AAAA;AAAA,MAGlBM,aAHkB;AAAA,MAGHC,eAHG;;AAAA,mBAIAP,QAAQ,CAAS,CAAT,CAJR;AAAA;AAAA,MAIlBQ,KAJkB;AAAA,MAIXC,OAJW;;AAMzBR,EAAAA,SAAS,CAAC,YAAM;AACZS,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,GAFQ,CAAT;;AAIA,MAAMA,QAAQ,GAAG,SAAXA,QAAW,CAACC,IAAD,EAAe;AAC5BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAEAN,IAAAA,UAAU,CAAC,KAAD,CAAV;AACA,QAAIM,IAAJ,EAAUF,OAAO,CAACD,KAAK,GAAG,CAAT,CAAP;AACV,QAAMM,SAAS,GAAG,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,QAAX,CAAoB,IAAID,IAAJ,GAAWE,QAAX,KAAwB,CAA5C,CAAT,EACbC,WADa,GAEbC,KAFa,CAEP,GAFO,EAEF,CAFE,CAAlB;AAuCH,GA5CD;;AA8CA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKf,aAAa,IAAI,oBAAC,cAAD;AAAgB,IAAA,YAAY,EAAEA,aAA9B;AAA6C,IAAA,SAAS,EAAE,mBAACgB,CAAD;AAAA,aAAaA,CAAb;AAAA,KAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADtB,EAEI,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAC,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAMH,CA9DD;;AAiEA,IAAMF,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAC7BH,EAAAA,SAAS,EAAE;AACPI,IAAAA,IAAI,EAAE,CADC;AAEPC,IAAAA,KAAK,EAAE,SAFA;AAGPC,IAAAA,eAAe,EAAE,SAHV;AAIPC,IAAAA,UAAU,EAAE,QAJL;AAKPC,IAAAA,cAAc,EAAE;AALT;AADkB,CAAlB,CAAf;AAUA,eAAe1B,cAAf","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, { useState, useEffect } from 'react';\nimport { StyleSheet, Image, View, Button } from 'react-native';\nimport { RepositoryModel } from '../model/repository';\nimport RepositoryLine from './RepositoryLine';\n\ninterface Response {\n    incomplete_results: boolean;\n    items: RepositoryModel[];\n    total_count: number;\n}\n\n\nconst RepositoryView = () => {\n\n    const [loading, setLoading] = useState(false);\n    const [_repositories, setRepositories] = useState<RepositoryModel[]>([]);\n    const [_page, setPage] = useState<number>(1);\n\n    useEffect(() => {\n        getRepos(null);\n    })\n\n    const getRepos = (info: any) => {\n        console.log(info);\n\n        setLoading(false);\n        if (info) setPage(_page + 1);\n        const lastMonth = new Date(new Date().setMonth(new Date().getMonth() - 1))\n            .toISOString()\n            .split('T')[0];\n\n        /* fetch('https://api.github.com/search/repositories?q=created:>' + lastMonth + '&sort=stars&order=desc&page=' + _page, {\n            'headers': {\n                'Authorization': \"token 66ef3f80be2e4f109bfbb55831bb0e88006281b1\"\n            }\n        })\n            .then(response => response.json())\n            .then((responseJson: Response) => {\n                console.log('getting data from fetch');\n                const res: RepositoryModel[] = responseJson.items.map(({\n                    id,\n                    name,\n                    description,\n                    html_url,\n                    created_at,\n                    stargazers_count,\n                    open_issues,\n                    owner\n                }) => ({\n                    id,\n                    name,\n                    description,\n                    html_url,\n                    created_at: new Date(created_at),\n                    stargazers_count,\n                    open_issues,\n                    owner: {\n                        avatar_url: owner.avatar_url,\n                        login: owner.login,\n                        html_url: owner.html_url\n                    }\n                }));\n                setLoading(false);\n                setRepositories([..._repositories, ...res]);\n            })\n            .catch(error => console.log(error)) */\n    }\n\n    return (\n        <View style={styles.container}>\n            {_repositories && <RepositoryLine repositories={_repositories} fetchMore={(i: any) => (i)}></RepositoryLine>}\n            <StatusBar style=\"auto\" />\n        </View>\n    );\n}\n\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        color: '#9a9ec9',\n        backgroundColor: '#4b56a4',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n});\n\nexport default RepositoryView;"]},"metadata":{},"sourceType":"module"}