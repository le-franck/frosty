{"ast":null,"code":"import NativeModules from \"react-native-web/dist/exports/NativeModules\";\nvar NativeProxy = NativeModules.NativeUnimoduleProxy;\nvar modulesConstantsKey = 'modulesConstants';\nvar exportedMethodsKey = 'exportedMethods';\nvar NativeModulesProxy = {};\n\nif (NativeProxy) {\n  Object.keys(NativeProxy[exportedMethodsKey]).forEach(function (moduleName) {\n    NativeModulesProxy[moduleName] = NativeProxy[modulesConstantsKey][moduleName] || {};\n    NativeProxy[exportedMethodsKey][moduleName].forEach(function (methodInfo) {\n      NativeModulesProxy[moduleName][methodInfo.name] = function () {\n        var key = methodInfo.key,\n            argumentsCount = methodInfo.argumentsCount;\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        if (argumentsCount !== args.length) {\n          return Promise.reject(new Error(\"Native method \" + moduleName + \".\" + methodInfo.name + \" expects \" + argumentsCount + \" \" + (argumentsCount === 1 ? 'argument' : 'arguments') + \" but received \" + args.length));\n        }\n\n        return NativeProxy.callMethod(moduleName, key, args);\n      };\n    });\n\n    NativeModulesProxy[moduleName].addListener = function () {\n      var _NativeModules$UMReac;\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return (_NativeModules$UMReac = NativeModules.UMReactNativeEventEmitter).addProxiedListener.apply(_NativeModules$UMReac, [moduleName].concat(args));\n    };\n\n    NativeModulesProxy[moduleName].removeListeners = function () {\n      var _NativeModules$UMReac2;\n\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      return (_NativeModules$UMReac2 = NativeModules.UMReactNativeEventEmitter).removeProxiedListeners.apply(_NativeModules$UMReac2, [moduleName].concat(args));\n    };\n  });\n} else {\n  console.warn(\"The \\\"UMNativeModulesProxy\\\" native module is not exported through NativeModules; verify that @unimodules/react-native-adapter's native code is linked properly\");\n}\n\nexport default NativeModulesProxy;","map":{"version":3,"sources":["../src/NativeModulesProxy.ts"],"names":[],"mappings":";AAEA,IAAM,WAAW,GAAG,aAAa,CAAC,oBAAlC;AACA,IAAM,mBAAmB,GAAG,kBAA5B;AACA,IAAM,kBAAkB,GAAG,iBAA3B;AAQA,IAAM,kBAAkB,GAAgD,EAAxE;;AAEA,IAAI,WAAJ,EAAiB;AACf,EAAA,MAAM,CAAC,IAAP,CAAY,WAAW,CAAC,kBAAD,CAAvB,EAA6C,OAA7C,CAAqD,UAAA,UAAU,EAAG;AAChE,IAAA,kBAAkB,CAAC,UAAD,CAAlB,GAAiC,WAAW,CAAC,mBAAD,CAAX,CAAiC,UAAjC,KAAgD,EAAjF;AACA,IAAA,WAAW,CAAC,kBAAD,CAAX,CAAgC,UAAhC,EAA4C,OAA5C,CAAoD,UAAA,UAAU,EAAG;AAC/D,MAAA,kBAAkB,CAAC,UAAD,CAAlB,CAA+B,UAAU,CAAC,IAA1C,IAAkD,YAAqC;AAAA,YAC7E,GAD6E,GACrD,UADqD,CAC7E,GAD6E;AAAA,YACxE,cADwE,GACrD,UADqD,CACxE,cADwE;;AAAA,0CAAjC,IAAiC;AAAjC,UAAA,IAAiC;AAAA;;AAErF,YAAI,cAAc,KAAK,IAAI,CAAC,MAA5B,EAAoC;AAClC,iBAAO,OAAO,CAAC,MAAR,CACL,IAAI,KAAJ,oBACmB,UADnB,SACiC,UAAU,CAAC,IAD5C,iBAC4D,cAD5D,UAEI,cAAc,KAAK,CAAnB,GAAuB,UAAvB,GAAoC,WAFxC,uBAGmB,IAAI,CAAC,MAHxB,CADK,CAAP;AAOD;;AACD,eAAO,WAAW,CAAC,UAAZ,CAAuB,UAAvB,EAAmC,GAAnC,EAAwC,IAAxC,CAAP;AACD,OAZD;AAaD,KAdD;;AAqBA,IAAA,kBAAkB,CAAC,UAAD,CAAlB,CAA+B,WAA/B,GAA6C;AAAA;;AAAA,yCAAI,IAAJ;AAAI,QAAA,IAAJ;AAAA;;AAAA,aAC3C,yBAAA,aAAa,CAAC,yBAAd,EAAwC,kBAAxC,+BAA2D,UAA3D,SAA0E,IAA1E,EAD2C;AAAA,KAA7C;;AAEA,IAAA,kBAAkB,CAAC,UAAD,CAAlB,CAA+B,eAA/B,GAAiD;AAAA;;AAAA,yCAAI,IAAJ;AAAI,QAAA,IAAJ;AAAA;;AAAA,aAC/C,0BAAA,aAAa,CAAC,yBAAd,EAAwC,sBAAxC,gCAA+D,UAA/D,SAA8E,IAA9E,EAD+C;AAAA,KAAjD;AAED,GA3BD;AA4BD,CA7BD,MA6BO;AACL,EAAA,OAAO,CAAC,IAAR;AAGD;;AAED,eAAe,kBAAf","sourcesContent":["import { NativeModules } from 'react-native';\n\nconst NativeProxy = NativeModules.NativeUnimoduleProxy;\nconst modulesConstantsKey = 'modulesConstants';\nconst exportedMethodsKey = 'exportedMethods';\n\nexport type ProxyNativeModule = {\n  [propertyName: string]: any;\n  addListener: (eventName: string) => void;\n  removeListeners: (count: number) => void;\n};\n\nconst NativeModulesProxy: { [moduleName: string]: ProxyNativeModule } = {};\n\nif (NativeProxy) {\n  Object.keys(NativeProxy[exportedMethodsKey]).forEach(moduleName => {\n    NativeModulesProxy[moduleName] = NativeProxy[modulesConstantsKey][moduleName] || {};\n    NativeProxy[exportedMethodsKey][moduleName].forEach(methodInfo => {\n      NativeModulesProxy[moduleName][methodInfo.name] = (...args: unknown[]): Promise<any> => {\n        const { key, argumentsCount } = methodInfo;\n        if (argumentsCount !== args.length) {\n          return Promise.reject(\n            new Error(\n              `Native method ${moduleName}.${methodInfo.name} expects ${argumentsCount} ${\n                argumentsCount === 1 ? 'argument' : 'arguments'\n              } but received ${args.length}`\n            )\n          );\n        }\n        return NativeProxy.callMethod(moduleName, key, args);\n      };\n    });\n\n    // These are called by EventEmitter (which is a wrapper for NativeEventEmitter)\n    // only on iOS and they use iOS-specific native module, EXReactNativeEventEmitter.\n    //\n    // On Android only {start,stop}Observing are called on the native module\n    // and these should be exported as Expo methods.\n    NativeModulesProxy[moduleName].addListener = (...args) =>\n      NativeModules.UMReactNativeEventEmitter.addProxiedListener(moduleName, ...args);\n    NativeModulesProxy[moduleName].removeListeners = (...args) =>\n      NativeModules.UMReactNativeEventEmitter.removeProxiedListeners(moduleName, ...args);\n  });\n} else {\n  console.warn(\n    `The \"UMNativeModulesProxy\" native module is not exported through NativeModules; verify that @unimodules/react-native-adapter's native code is linked properly`\n  );\n}\n\nexport default NativeModulesProxy;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}