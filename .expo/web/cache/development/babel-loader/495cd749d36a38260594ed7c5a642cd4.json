{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/franckcaget/Hedia/frosty/views/Repository.tsx\";\n\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\n\nvar RepositoryView = function RepositoryView() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      _repositories = _useState4[0],\n      setRepositories = _useState4[1];\n\n  var getRepos = function getRepos() {\n    setLoading(false);\n    var lastMonth = new Date(new Date().setMonth(new Date().getMonth() - 1)).toISOString().split('T')[0];\n    fetch('https://api.github.com/search/repositories?q=created:>' + lastMonth + '&sort=stars&order=desc').then(function (response) {\n      return response.json();\n    }).then(function (responseJson) {\n      console.log('getting data from fetch', responseJson);\n      var res = responseJson.items.map(function (_ref) {\n        var name = _ref.name,\n            description = _ref.description,\n            html_url = _ref.html_url,\n            created_at = _ref.created_at,\n            stargazers_count = _ref.stargazers_count,\n            open_issues = _ref.open_issues,\n            owner = _ref.owner;\n        return {\n          name: name,\n          description: description,\n          html_url: html_url,\n          created_at: new Date(created_at),\n          stargazers_count: stargazers_count,\n          open_issues: open_issues,\n          owner: {\n            avatar_url: owner.avatar_url,\n            login: owner.login,\n            html_url: owner.html_url\n          }\n        };\n      });\n      console.log(res);\n      setLoading(false);\n      setRepositories(res);\n    }).catch(function (error) {\n      return console.log(error);\n    });\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, React.createElement(Button, {\n    title: loading ? \"loading\" : \"Load\",\n    onPress: getRepos,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }), React.createElement(StatusBar, {\n    style: \"auto\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    color: '#9a9ec9',\n    backgroundColor: '#4b56a4',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\nexport default RepositoryView;","map":{"version":3,"sources":["/Users/franckcaget/Hedia/frosty/views/Repository.tsx"],"names":["StatusBar","React","useState","RepositoryView","loading","setLoading","_repositories","setRepositories","getRepos","lastMonth","Date","setMonth","getMonth","toISOString","split","fetch","then","response","json","responseJson","console","log","res","items","map","name","description","html_url","created_at","stargazers_count","open_issues","owner","avatar_url","login","catch","error","styles","container","StyleSheet","create","flex","color","backgroundColor","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, { useState } from 'react';\nimport { StyleSheet, Image, View, Button } from 'react-native';\nimport { RepositoryModel } from '../model/repository';\n\ninterface Response {\n    incomplete_results: boolean;\n    items: RepositoryModel[];\n    total_count: number;\n}\n\n\nconst RepositoryView = () => {\n\n    const [loading, setLoading] = useState(false);\n    const [_repositories, setRepositories] = useState(null);\n\n    const getRepos = () => {\n        setLoading(false);\n        const lastMonth = new Date(new Date().setMonth(new Date().getMonth() - 1))\n            .toISOString()\n            .split('T')[0];\n\n        fetch('https://api.github.com/search/repositories?q=created:>' + lastMonth + '&sort=stars&order=desc')\n            .then(response => response.json())\n            .then((responseJson: Response) => {\n                console.log('getting data from fetch', responseJson)\n                const res: RepositoryModel[] = responseJson.items.map(({\n                    name,\n                    description,\n                    html_url,\n                    created_at,\n                    stargazers_count,\n                    open_issues,\n                    owner\n                }) => ({\n                    name,\n                    description,\n                    html_url,\n                    created_at: new Date(created_at),\n                    stargazers_count,\n                    open_issues,\n                    owner: {\n                        avatar_url: owner.avatar_url,\n                        login: owner.login,\n                        html_url: owner.html_url\n                    }\n                }));\n                console.log(res);\n\n                setLoading(false);\n                setRepositories(res);\n            })\n            .catch(error => console.log(error))\n    }\n\n    return (\n        <View style={styles.container}>\n            <Button title={loading ? \"loading\" : \"Load\"} onPress={getRepos} />\n            <StatusBar style=\"auto\" />\n        </View>\n    );\n}\n\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        color: '#9a9ec9',\n        backgroundColor: '#4b56a4',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n});\n\nexport default RepositoryView;"]},"metadata":{},"sourceType":"module"}